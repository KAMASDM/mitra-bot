rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Define admin and superadmin functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "superadmin";
    }
    
    // Function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Superadmin has full access to everything
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // Users collection - only owner can write, but anyone authenticated can read
    match /users/{userId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }
    
    // All other collections - authenticated users can read and write
    match /{collection}/{document} {
      allow read, write: if isAuthenticated();
      
      // Subcollections
      match /{subcollection}/{subdocument} {
        allow read, write: if isAuthenticated();
      }
    }
    match /professional_types/{document} {
      allow read: if true;
      
      // Subcollections
      match /{subcollection}/{subdocument} {
        allow read: if true;
      }
    }
  }
}
